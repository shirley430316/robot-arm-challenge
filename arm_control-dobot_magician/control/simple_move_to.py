import sys
import os
import time
import numpy as np
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'pydobotplus'))
sys.path.append(os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))), "yolo_ws"))

from pydobotplus import dobotplus as dobot
from mydobot import MyDobot
from get_co import get_co, initialize_system, close_camera
import use_transform_matrix

try:
    # Initialize the camera and model system first
    if not initialize_system():
        print("Failed to initialize camera and model system")
        sys.exit(1)

    device = MyDobot(port='COM5')

    #get three destinations and safe point and zlimit
    # a=input("Move it to the table:")
    zlimit=device.get_pose().position.z
    zlimit=0.7033157348632812
    # a=input("Move it to the safe point:")
    # SAFE_CURVE=[device.get_pose().position.x,device.get_pose().position.y,device.get_pose().position.z,device.get_pose().position.r]
    SAFE_CURVE=[102.69193267822266, 203.8675537109375, 72.7863540649414, -0.17021560668945312]
    # a=input("Move it to the small destination:")
    # des1=[device.get_pose().position.x,device.get_pose().position.y,device.get_pose().position.z,device.get_pose().position.r]
    des1=[202.9142303466797, -146.9964141845703, 75.55136108398438, -99.35551452636719]
    # a=input("Move it to the big destination:")
    # des2=[device.get_pose().position.x,device.get_pose().position.y,device.get_pose().position.z,device.get_pose().position.r]
    des2=[202.9142303466797, -146.9964141845703, 75.55136108398438, -99.35551452636719]
    # a=input("Move it to the circle destination:")
    # des3=[device.get_pose().position.x,device.get_pose().position.y,device.get_pose().position.z,device.get_pose().position.r]
    des3=[202.9142303466797, -146.9964141845703, 75.55136108398438, -99.35551452636719]
    # a=input("move it to the centre")
    # centre=[device.get_pose().position.x,device.get_pose().position.y,device.get_pose().position.z,device.get_pose().position.r]
    centre = [[39.998233795166016, 307.4762268066406, -34.73739242553711, 19.15331268310547], [131.1303253173828, 278.66644287109375, 
-35.03204345703125, 1.3650741577148438], [131.1303253173828, 278.66644287109375, -35.03204345703125, 1.3650741577148438], [131.1303253173828, 278.66644287109375, -35.03204345703125, 1.3650741577148438], [131.1303253173828, 278.66644287109375, -35.03204345703125, 1.3650741577148438], [16.79629898071289, 281.4965515136719, -34.839454650878906, 23.150375366210938], [16.79629898071289, 281.4965515136719, -34.839454650878906, 23.150375366210938], [42.317054748535156, 285.0524597167969, -34.4417724609375, 18.120956420898438], [42.317054748535156, 285.0524597167969, -4727783203, 281.7585754394531, -34.408939361572266, 12.165077209472656], [68.91008758544922, 284.13885498046875, -35.29236602783203, 12.932723999023438], [99.47319030761719, 272.73431396484375, -33.96114730834961, 6.5268402099609375], [95.98576354980469, 272.5222473144531, -35.296409606933594, 7.162139892578125], 
[125.84825134277344, 258.0947570800781, -34.29545593261719, 0.5709609985351562], [122.21574401855469, 259.1003723144531, -34.93212890625, 1.3121337890625], [166.6350860595703, 209.18052673339844, -35.38188934326172, -11.976097106933594], [166.6350860595703, 209.18052673339844, -35.38188934326172, -11.976097106933594], [136.90023803710938, 229.30450439453125, -35.40910339355469, -4.273159027099609], [136.90023803710938, 229.30450439453125, -35.40910339355469, -4.273159027099609], [100.57317352294922, 246.99093627929688, -35.93468475341797, 4.4091949462890625], [100.96528625488281, 246.64788818359375, -35.81853485107422, 4.303314208984375], [68.28877258300781, 256.59576416015625, -35.47357940673828, 11.662139892578125], [68.90826416015625, 256.5375671386719, -35.0975341796875, 11.52978515625], [33.16550827026367, 263.5121765136719, -35.27312469482422, 19.39154815673828], [33.16550827026367, 263.5121765136719, -35.27312469482422, 19.39154815673828], [33.16550827026367, 263.5121765136719, -35.27312469482422, 19.39154815673828], [20.21857452392578, 239.89199829101562, -34.68433380126953, 
21.74742889404297], [20.21857452392578, 239.89199829101562, -34.68433380126953, 21.74742889404297], [48.838279724121094, 239.73341369628906, -35.167083740234375, 15.050369262695312], [49.20404815673828, 241.5288848876953, -34.995155334472656, 15.050369262695312], [87.50675201416016, 232.88095092773438, -34.90507507324219, 5.9709625244140625], [87.50675201416016, 232.88095092773438, -34.90507507324219, 5.9709625244140625], [87.50675201416016, 232.88095092773438, -34.90507507324219, 5.9709625244140625], [87.50675201416016, 232.88095092773438, -34.90507507324219, 
5.9709625244140625], [87.50675201416016, 232.88095092773438, -34.90507507324219, 5.9709625244140625],[130.06690979003906, 179.02194213867188, -33.471900939941406, 
-9.434921264648438], [130.06690979003906, 179.02194213867188, -33.471900939941406, -9.434921264648438], [127.61626434326172, 182.2949676513672, -34.21678161621094, -8.429039001464844], [91.71082305908203, 201.62515258789062, -34.158042907714844, 2.1062545776367188], [91.71082305908203, 201.62515258789062, -34.158042907714844, 2.1062545776367188], [46.35203552246094, 213.8556365966797, -33.076194763183594, 14.335662841796875], [46.35203552246094, 213.8556365966797, -33.076194763183594, 14.335662841796875], [15.881281852722168, 217.17938232421875, -33.250999450683594, 22.382720947265625], [15.881281852722168, 217.17938232421875, -33.250999450683594, 22.382720947265625], [21.127973556518555, 187.40550231933594, -32.434600830078125, 20.132720947265625], [21.127973556518555, 187.40550231933594, -32.434600830078125, 20.132720947265625], [21.127973556518555, 187.40550231933594, -32.434600830078125, 20.132720947265625], [21.127973556518555, 187.40550231933594, -32.434600830078125, 20.132720947265625],[32.434600830078125, 20.132720947265625], [21.127973556518555, 187.40550231933594, -32.434600830078125, 20.132720947265625], [21.127973556518555, 187.40550231933594, -32.434600830078125, 20.132720947265625], [21.127973556518555, 187.40550231933594, -32.434600830078125, 20.132720947265625], [21.127973556518555, 187.40550231933594, -32.434600830078125, 20.132720947265625], [21.127973556518555, 187.40550231933594, -32.434600830078125, 20.132720947265625]]
    # result=get_co()
    # print(result)
    time.sleep(2)
    trans=use_transform_matrix.load_transform_matrix("base_camera_result.npy")
    trans=[[0.6189,0.6758,-0.4004,423.2813],
    [0.7838,0.5646,-0.2586,344.2130],
    [0.0513,-0.4739,-0.8791,459.0270],
    [0,0,0,1]]
    trans=[[-1.0684,0.0883,-0.2500,-0.0004],
    [0.4572,0.7488,-0.4797,-0.0003],
    [-3.2201,2.3062,-21.0907,-0.0331],
    [0,0,0,1]]
    device.grip(False)
    while(True):
        # define the nail destination
        # if result[0]=="circle":
        #     nail=np.dot(trans, (np.array(np.array(result[1])*1000)))
        #     angle=0
        # else:
        #     nail=np.dot(trans, (np.array(np.array(result[1])*1000) + np.array(np.array(result[2])*1000)) /2)
        #     angle=use_transform_matrix.transform_angle(trans, result[1], result[2])
        # print("destination=",[nail[0],nail[1],zlimit,angle%180])
        for i in range(10000):
            device.safe_jump_to(safe_curve=[SAFE_CURVE], 
                            destination=[centre[i%40][0],centre[i%40][1],centre[i%40][2],centre[i%40][3]], 
                            wait=True)
            device.grip(True, wait_time=0.5)
            device.safe_jump_to(safe_curve=[SAFE_CURVE],
            destination=[des2[0], des2[1], des2[2], des2[3]], 
            wait=True)
            device.grip(False, wait_time=0.5)
            result=get_co()
            print(result)
            # if result[0] == "small":
            #     device.safe_jump_to(safe_curve=[SAFE_CURVE],
            #                 destination=[des1[0], des1[1], des1[2], des1[3]], 
            #                 wait=True)

            # elif result[0] == "big":
            #     device.safe_jump_to(safe_curve=[SAFE_CURVE],
            #                 destination=[des2[0], des2[1], des2[2], des2[3]], 
            #                 wait=True)

            # elif result[0] == "circle":
            #     device.safe_jump_to(safe_curve=[SAFE_CURVE],
            #                 destination=[des3[0], des3[1], des3[2], des3[3]], 
            #                 wait=True)
            
        # result=get_co()
        # print(result)
        # time.sleep(2)
        # device.grip(False)
        print(device.get_alarms())

    device.close()
finally:
    # Always close the camera when done
    close_camera()

